--조인
CREATE TABLE A(
	CODE CHAR(1),
	VAL NUMBER(1)
);
CREATE TABLE B(
	CODE CHAR(1),
	UNIT CHAR(1)
);
INSERT INTO A VALUES('A',1);
INSERT INTO A VALUES('B',2);
INSERT INTO A VALUES('C',3);
INSERT INTO A VALUES('D',4);

INSERT INTO B VALUES('A','+');
INSERT INTO B VALUES('B','-');
INSERT INTO B VALUES('C','*');
INSERT INTO B VALUES('F','/');

SELECT * FROM A;
SELECT * FROM B;

-- 동일 조인
SELECT A.CODE, A.VAL, B.CODE, B.UNIT
FROM A, B
WHERE A.CODE = B.CODE;

--INNER JOIN
SELECT A.CODE, A.VAL, B.CODE, B.UNIT
FROM A INNER JOIN B ON A.CODE = B.CODE;

--자연 조인(NATURAL JOIN)
SELECT * FROM A NATURAL JOIN B;

--교차 조인(CROSS JOIN)
SELECT * FROM A CROSS JOIN B;
SELECT * FROM A , B;

--외부 조인(OUTER JOIN)
--두 테이블을 조인시 한쪽 테이블에 일치하는 행이 없어도 데이터를 포함해서 결과를 반환
--왼쪽 외부 조인(LEFT OUTER JOIN), 오른쪽 외부 조인(RIGHT OUTER JOIN)
--LEFT OUTER JOIN
SELECT A.*, B.*
FROM A, B 
WHERE A.CODE = B.CODE(+);

SELECT A.*, B.*
FROM A LEFT OUTER JOIN B
ON A.CODE = B.CODE;

--RIGHT OUTER JOIN
SELECT A.*, B.*
FROM A, B 
WHERE A.CODE(+) = B.CODE;

SELECT A.*, B.*
FROM A RIGHT OUTER JOIN B
ON A.CODE = B.CODE;

--학과 테이블
CREATE TABLE MAJOR(
	MAJOR_NO CHAR(2) PRIMARY KEY,
	MAJOR_NAME VARCHAR2(30)
);

--학과명 뽑음
SELECT DISTINCT STD_MAJOR FROM STUDENT;

--학과번호 랜덤으로 뽑음
SELECT CHR(DBMS_RANDOM.VALUE(65,90)) 
		|| FLOOR(DBMS_RANDOM.VALUE() * 10)  FROM DUAL;

SELECT CHR(DBMS_RANDOM.VALUE(65,90)) 
	|| FLOOR(DBMS_RANDOM.VALUE() * 10), STD_MAJOR  
FROM (SELECT DISTINCT STD_MAJOR FROM STUDENT);

	
INSERT INTO MAJOR
SELECT CHR(DBMS_RANDOM.VALUE(65,90)) 
	|| FLOOR(DBMS_RANDOM.VALUE() * 10), STD_MAJOR  
FROM (SELECT DISTINCT STD_MAJOR FROM STUDENT);

--학생 테이블에 학과번호 컬럼을 추가
ALTER TABLE STUDENT ADD MAJOR_NO CHAR(2);
--학생 테이블에 학과번호 업데이트 - 학과 테이블에 있는 데이터를 서브쿼리로 조회해서
UPDATE STUDENT SET MAJOR_NO = 
(SELECT MAJOR_NO FROM MAJOR WHERE MAJOR_NAME LIKE STD_MAJOR);
--학생 테이블에 학과명 컬럼을 삭제
ALTER TABLE STUDENT DROP COLUMN STD_MAJOR;

--학생 정보 출력시
--학번 이름 학과명 평점 조회
--동일 조인
SELECT S.STD_NO, S.STD_NAME, M.MAJOR_NAME, S.STD_SCORE 
FROM STUDENT S INNER JOIN MAJOR M
ON S.MAJOR_NO = M.MAJOR_NO; 

SELECT S.STD_NO, S.STD_NAME, M.MAJOR_NAME, S.STD_SCORE 
FROM STUDENT S, MAJOR M
WHERE S.MAJOR_NO = M.MAJOR_NO; 

--장학금 테이블
CREATE TABLE STUDENT_SCHOLARSHIP(
    SCHOLARSHIP_NO NUMBER,
    STD_NO CHAR(8),
    MONEY NUMBER
);

--장학금 받는 학생의 학번, 이름, 장학금 금액 조회
SELECT S.STD_NO, S.STD_NAME, SS.MONEY
FROM STUDENT S, STUDENT_SCHOLARSHIP SS
WHERE S.STD_NO = SS.STD_NO ;

SELECT S.STD_NO, S.STD_NAME, SS.MONEY
FROM STUDENT S INNER JOIN STUDENT_SCHOLARSHIP SS
ON S.STD_NO = SS.STD_NO;

--장학금 받는 학생의 학번, 이름, 학과명, 장학금 금액 조회 
SELECT S.STD_NO, S.STD_NAME, M.MAJOR_NAME, SS.MONEY  
FROM STUDENT S, MAJOR M, STUDENT_SCHOLARSHIP SS
WHERE S.MAJOR_NO = M.MAJOR_NO AND S.STD_NO = SS.STD_NO;

SELECT S.STD_NO, S.STD_NAME, M.MAJOR_NAME, SS.MONEY  
FROM STUDENT S INNER JOIN MAJOR M
ON S.MAJOR_NO = M.MAJOR_NO
INNER JOIN STUDENT_SCHOLARSHIP SS
ON S.STD_NO = SS.STD_NO;

--학과 데이터 2건만 추가
INSERT INTO MAJOR VALUES('A9', '국어국문학과');
INSERT INTO MAJOR VALUES('B2', '생활체육학과');

--학생정보 출력
--학번 이름 학과번호 평점 학과번호 학과명
SELECT S.*, M.*
FROM STUDENT S INNER JOIN  MAJOR M
ON S.MAJOR_NO = M.MAJOR_NO; 

SELECT S.*, M.*
FROM STUDENT S LEFT OUTER JOIN MAJOR M
ON S.MAJOR_NO = M.MAJOR_NO; 

SELECT S.*, M.*
FROM STUDENT S RIGHT OUTER JOIN MAJOR M
ON S.MAJOR_NO = M.MAJOR_NO; 

--학과 테이블에서 학생 테이블에 사용되지 않은 데이터를 조회
--학과번호, 학과명
SELECT M.*
FROM STUDENT S RIGHT OUTER JOIN MAJOR M
ON S.MAJOR_NO = M.MAJOR_NO
WHERE S.STD_NO IS NULL;

--장학금을 받지 못한 학생들을 조회
--학번 이름 학과번호 평점
SELECT S.*
FROM STUDENT S LEFT OUTER JOIN STUDENT_SCHOLARSHIP SS
ON S.STD_NO = SS.STD_NO
WHERE SS.SCHOLARSHIP_NO IS NULL;
--학번 이름 학과명 평점
SELECT S.STD_NO, S.STD_NAME, M.MAJOR_NAME, S.STD_SCORE
FROM STUDENT S LEFT OUTER JOIN STUDENT_SCHOLARSHIP SS
ON S.STD_NO = SS.STD_NO
INNER JOIN MAJOR M
ON S.MAJOR_NO = M.MAJOR_NO
WHERE SS.SCHOLARSHIP_NO IS NULL;
--학과별로 장학금을 받지 못한 학생들의 인원수를 조회
SELECT M.MAJOR_NAME, COUNT(*) AS STUDENT_COUNT
FROM STUDENT S LEFT OUTER JOIN STUDENT_SCHOLARSHIP SS
ON S.STD_NO = SS.STD_NO
INNER JOIN MAJOR M
ON S.MAJOR_NO = M.MAJOR_NO
WHERE SS.SCHOLARSHIP_NO IS NULL
GROUP BY M.MAJOR_NAME;
--학과별로 장학금을 받은 학생들의 (학과별, 성별), 인원수, 최대 평점, 최저 평점 조회
SELECT M.MAJOR_NAME, S.STD_GENDER, COUNT(*) AS STD_COUNT,
MAX(S.STD_SCORE) AS MAX_SCORE, MIN(S.STD_SCORE) AS MIN_SCORE 
FROM STUDENT S
INNER JOIN MAJOR M ON S.MAJOR_NO = M.MAJOR_NO
INNER JOIN STUDENT_SCHOLARSHIP SS  ON S.STD_NO  = SS.STD_NO
GROUP BY M.MAJOR_NAME, S.STD_GENDER;

SELECT M.MAJOR_NAME, S.STD_GENDER, COUNT(*) AS STD_COUNT,
MAX(S.STD_SCORE) AS MAX_SCORE, MIN(S.STD_SCORE) AS MIN_SCORE 
FROM STUDENT S
INNER JOIN MAJOR M ON S.MAJOR_NO = M.MAJOR_NO
INNER JOIN STUDENT_SCHOLARSHIP SS  ON S.STD_NO  = SS.STD_NO
GROUP BY ROLLUP(M.MAJOR_NAME, S.STD_GENDER);

SELECT M.MAJOR_NAME, S.STD_GENDER, COUNT(*) AS STD_COUNT,
MAX(S.STD_SCORE) AS MAX_SCORE, MIN(S.STD_SCORE) AS MIN_SCORE 
FROM STUDENT S
INNER JOIN MAJOR M ON S.MAJOR_NO = M.MAJOR_NO
INNER JOIN STUDENT_SCHOLARSHIP SS  ON S.STD_NO  = SS.STD_NO
GROUP BY CUBE(M.MAJOR_NAME, S.STD_GENDER);

--car_sell
CREATE TABLE CAR_SELL(
    CAR_SELL_NO NUMBER PRIMARY KEY,
    CAR_ID VARCHAR2(10),
    CAR_SELL_EA NUMBER(3),
    CAR_SELL_PRICE NUMBER(6),
    CAR_SELL_DATE DATE DEFAULT SYSDATE
);

--car_maker
CREATE TABLE CAR_MAKER(
	CAR_MAKER_CODE CHAR(8) PRIMARY KEY,
	CAR_MAKER_NAME VARCHAR2(30)
);
--제조사 코드 형식 AA-0-000
SELECT DBMS_RANDOM.STRING('X',2) || '-' ||
	TRUNC(DBMS_RANDOM.VALUE(0,10),0) || '-' ||
	TRUNC(DBMS_RANDOM.VALUE(100,1000),0)
FROM DUAL;

--자동차 제조사만 조회 - 중복된 내용 제거
SELECT DISTINCT CAR_MAKER FROM CAR;
--자동차 제조사 코드 생성
SELECT DBMS_RANDOM.STRING('X',2) || '-' ||
	TRUNC(DBMS_RANDOM.VALUE(0,10),0) || '-' ||
	TRUNC(DBMS_RANDOM.VALUE(100,1000),0), CAR_MAKER
FROM
(SELECT DISTINCT CAR_MAKER FROM CAR);
--제조사 테이블에 삽입
INSERT INTO CAR_MAKER
SELECT DBMS_RANDOM.STRING('X',2) || '-' ||
	TRUNC(DBMS_RANDOM.VALUE(0,10),0) || '-' ||
	TRUNC(DBMS_RANDOM.VALUE(100,1000),0), CAR_MAKER
FROM
(SELECT DISTINCT CAR_MAKER FROM CAR);

--CAR테이블 CAR_MAKER_CODE 컬럼 추가
ALTER TABLE CAR ADD CAR_MAKER_CODE CHAR(8);
--CAR테이블의 CAR_MAKER_CODE를 업데이트, CAR_MAKER 테이블에서 가져옴
UPDATE CAR SET CAR_MAKER_CODE = 
(SELECT CAR_MAKER_CODE FROM CAR_MAKER
WHERE CAR_MAKER_NAME = CAR_MAKER);
--CAR테이블의 CAR_MAKER 컬럼 삭제
ALTER TABLE CAR DROP COLUMN CAR_MAKER;
--자동차 정보 조회시 자동차 번호, 자동차 모델명, 제조사명, 제조년도, 금액
SELECT C.CAR_ID, C.CAR_NAME, 
	CM.CAR_MAKER_NAME, C.CAR_MAKE_YEAR, C.CAR_PRICE 
FROM CAR C INNER JOIN CAR_MAKER CM
ON C.CAR_MAKER_CODE = CM.CAR_MAKER_CODE; 
--자동차 제조사별 자동차 제품 개수, 평균가, 최고가, 최소가 조회
SELECT CM.CAR_MAKER_NAME, COUNT(*) AS MAKER_COUNT,
MAX(C.CAR_PRICE) AS MAX_PRICE, MIN(C.CAR_PRICE) AS MIN_PRICE
FROM CAR C INNER JOIN CAR_MAKER CM
ON C.CAR_MAKER_CODE = CM.CAR_MAKER_CODE
GROUP BY CM.CAR_MAKER_NAME; 
--자동차 제조사별, 제조년도별, 출시된 제품 개수를 조회 
--단, 금액이 10000이상인 것들만 대상으로 잡음

--자동차 판매 정보 조회
--판매 번호, 판매된 모델명, 판매일, 회원이름, 판매개수, 판매금액

--자동차 판매 정보 조회
--판매 번호, 판매된 모델명, 판매일, 회원이름, 판매개수, 판매금액
--외부 조인을 이용해서 모든 자동차 데이터는 조회

--판매 연도별, 제조사별, 판매 대수 총합, 판매금액 총합, 판매금액 평균을 조회

--판매 연도/월별, 제조사별, 판매 대수 총합, 판매금액 총합, 판매금액 평균을 조회

--한번도 판매되지 않은 자동차 목록 조회
--자동차 번호, 자동차 모델명, 제조사명, 제조년도, 금액