--제약조건
--SELECT * FROM USER_CONSTRAINTS;
--기본키
--ALTER TABLE 테이블명 ADD CONSTRAINT 제약조건명 PRIMARY KEY(기본키로 지정할 컬럼명);
--외래키
--ALTER TABLE 테이블명 ADD CONSTRAINT 제약조건명 FOREIGN KEY(외래키 지정할 컬럼명)
--REFERECES 참조할테이블명(참조할테이블의 기본키) [ON DELETE CASCADE | RESTRICT] 
DROP TABLE PERSON;
CREATE TABLE PERSON(	
    PID CHAR(4),
    PNAME VARCHAR2(30 BYTE), 
    AGE NUMBER(3,0)
);
--기본키를 추가하는 방법
ALTER TABLE PERSON ADD CONSTRAINT PK_PERSON_PID PRIMARY KEY(PID);
SELECT * FROM USER_CONSTRAINTS;
INSERT INTO PERSON VALUES('0001','홍길동',20);
INSERT INTO PERSON VALUES('0002','김길동',30);
INSERT INTO PERSON VALUES('0003','이길동',40);
INSERT INTO PERSON VALUES('0004','박길동',50);
--기본키 추가하는 두번째 방법
DROP TABLE PERSON;
CREATE TABLE PERSON(	
    PID CHAR(4),
    PNAME VARCHAR2(30 BYTE), 
    AGE NUMBER(3,0),
    CONSTRAINT PK_PERSON_PID PRIMARY KEY(PID)
);

--외래키 추가하는 방법
CREATE TABLE PERSON_ORDER(
	P_ORDER_NO NUMBER(5),
	P_ORDER_MEMO VARCHAR2(300),
	PID CHAR(4),
	CONSTRAINT PK_P_ORDER_NO PRIMARY KEY(P_ORDER_NO),
	CONSTRAINT FK_PO_PID FOREIGN KEY(PID)
	REFERENCES PERSON(PID)
);
--기본키
ALTER TABLE PERSON_ORDER 
ADD CONSTRAINT PK_P_ORDER_NO PRIMARY KEY(P_ORDER_NO);
--외래키
ALTER TABLE PERSON_ORDER
ADD CONSTRAINT FK_PO_PID FOREIGN KEY(PID)
REFERENCES PERSON(PID);

INSERT INTO PERSON_ORDER VALUES(1, '지시 내용', '0001');
INSERT INTO PERSON_ORDER VALUES(2, '지시 내용', '0002');
INSERT INTO PERSON_ORDER VALUES(3, '지시 내용', '0003');
--에러, PERSON 테이블에 해당 PID 값이 없을때
INSERT INTO PERSON_ORDER VALUES(4, '지시 내용', '0005');

SELECT * FROM PERSON;
SELECT * FROM PERSON_ORDER;

--부모 레코드를 지우기전에 자식 레코드를 먼저 삭제
DELETE FROM PERSON_ORDER WHERE PID LIKE '0001';
--PERSON 테이블에 PID가 0001인 데이터를 삭제 -> RESTRICT는 자식 레코드가 있으면 멈춤
DELETE FROM PERSON WHERE PID LIKE '0001';

--제약조건 삭제 - FK_PO_PID
ALTER TABLE PERSON_ORDER DROP CONSTRAINT FK_PO_PID;

--외래키 제약조건, CASCADE -> 삭제시 자식 레코드도 같이 삭제
ALTER TABLE PERSON_ORDER ADD CONSTRAINT FK_PO_PID
FOREIGN KEY(PID) REFERENCES PERSON(PID) ON DELETE CASCADE;
--외래키 제약조건, SET NULL -> 삭제시 자식 레코드 값을 NULL로 변경
ALTER TABLE PERSON_ORDER ADD CONSTRAINT FK_PO_PID
FOREIGN KEY(PID) REFERENCES PERSON(PID) ON DELETE SET NULL;
--PERSON 테이블에 PID가 0003인 데이터를 삭제
DELETE FROM PERSON WHERE PID LIKE '0003';
--PERSON, PERSON_ORDER 테이블 확인
SELECT * FROM PERSON;
SELECT * FROM PERSON_ORDER;

DROP TABLE PERSON CASCADE CONSTRAINTS;

SELECT * FROM USER_CONSTRAINTS WHERE CONSTRAINT_NAME LIKE '%FK%';

--STUDENT 테이블의 학과번호를 외래키로 지정, MAJOR의 테이블의 학과번호로 지정
SELECT * FROM MAJOR;

ALTER TABLE STUDENT ADD CONSTRAINT FK_MAJOR_NO FOREIGN KEY(MAJOR_NO)
REFERENCES MAJOR(MAJOR_NO) ON DELETE CASCADE;
--STUDENT_SCHOLARSHIP 테이블의 학번을 외래키로 지정, STUDENT 테이블의 학번으로 지정
--매칭되는 데이터가 없으면 에러가 남, 부모키가 없습니다.
--일치하지 않는 데이터를 처리(삭제, 수정)
ALTER TABLE STUDENT_SCHOLARSHIP 
ADD CONSTRAINT FK_STD_NO FOREIGN KEY(STD_NO)
REFERENCES STUDENT(STD_NO);

--학번이 일치하지 않는 데이터를 장학금 테이블에서 삭제
DELETE FROM STUDENT_SCHOLARSHIP WHERE STD_NO
IN(SELECT SS.STD_NO 
FROM STUDENT S RIGHT OUTER JOIN STUDENT_SCHOLARSHIP SS 
ON S.STD_NO = SS.STD_NO
WHERE S.STD_NO IS NULL);

SELECT SS.STD_NO 
FROM STUDENT S RIGHT OUTER JOIN STUDENT_SCHOLARSHIP SS 
ON S.STD_NO = SS.STD_NO
WHERE S.STD_NO IS NULL;

--CHECK 제약조건
--컬럼에 들어올 값의 범위 및 제약을 거는 방법
--ALTER TABLE 테이블명 ADD CONSTRAINT 제약조건명 CHECK(조건식)
--PERSON 테이블에 나이가 0보다 큰값만 저장되게끔 제약조건을 설정
DELETE FROM PERSON;
ALTER TABLE PERSON DROP CONSTRAINT CHECK_AGE;
ALTER TABLE PERSON ADD CONSTRAINT CHECK_AGE CHECK(AGE BETWEEN 0 AND 100);
--데이터 추가 나이가 0이하인 데이터를 INSERT 
INSERT INTO PERSON VALUES('0006','임길동',-10);
INSERT INTO PERSON VALUES('0006','임길동',10);

--PERSON 테이블에 데이터 추가시 이름에 공백이 들어가지 않도록 제약조건을 설정
ALTER TABLE PERSON ADD CONSTRAINT CHECK_NAME CHECK(PNAME NOT LIKE '% %');
INSERT INTO PERSON VALUES('0007','임길동',10);
ALTER TABLE PERSON DROP CONSTRAINT CHECK_NAME;
--ALTER TABLE PERSON ADD CONSTRAINT CHECK_NAME CHECK(PNAME <> '% %'); (X)
DELETE FROM PERSON WHERE PID = '0008';
INSERT INTO PERSON VALUES('0008','곽 길동',10);
SELECT INSTR('곽길동',' ') FROM DUAL;
ALTER TABLE PERSON ADD CONSTRAINT CHECK_NAME CHECK(INSTR(PNAME,' ') != 0);
--이런식으로 여러개 컬럼을 체크하는 제약은 조건은 두지 않음
--ALTER TABLE PERSON ADD CONSTRAINT CHECK_COLUMN CHECK(AGE > 0 AND INSTR(PNAME,' ') != 0);

--학생 테이블에 평점이 0.0~4.5까지만 저장되게끔 제약조건을 추가
ALTER TABLE STUDENT ADD CONSTRAINT CHECK_SCORE_RANGE 
CHECK(STD_SCORE >= 0 AND STD_SCORE <= 4.5);

ALTER TABLE STUDENT ADD CONSTRAINT CHECK_SCORE_RANGE 
CHECK(STD_SCORE BETWEEN 0 AND 4.5);

ALTER TABLE STUDENT DROP CONSTRAINT CHECK_SCORE_RANGE;
--학생 이름은 6글자 이하로만 등록 되게끔 제약조건을 추가
ALTER TABLE STUDENT 
ADD CONSTRAINT CHECK_NAME_LENGTH CHECK(LENGTH(STD_NAME) <= 6);
--데이터 오류가 발생하는지 체크
INSERT INTO STUDENT 
VALUES('11112222','김철수안녕하',3.6,'M','L0');









